<mxfile host="app.diagrams.net" modified="2024-04-06T07:36:05.704Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36" etag="Dn6R7_tfi2bDuZ2qW3fZ" version="24.2.0" type="github">
  <diagram id="mzJiLo1gRkwNTmZv_g5L" name="Page-1">
    <mxGraphModel dx="1434" dy="-923" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1169" pageHeight="827" math="1" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="TKYHGULabBaCT76j1ZdH-27" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;CNN&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;b&gt;convolution&lt;br&gt;&lt;/b&gt;· classify by small patches&lt;br&gt;· slide over input&lt;br&gt;· use the same weights for each patch to build feature map&lt;br&gt;&lt;b&gt;pooling (subsampling)&lt;/b&gt;&lt;br&gt;· stores &lt;i&gt;if&lt;/i&gt;&amp;nbsp;there&#39;s an activation for feature in that area&lt;br&gt;· stride&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;cross-correlation/convolution&lt;/b&gt;&lt;br&gt;we don&#39;t actually need to flip `g(t)` as we would with convolution, because we&#39;re learning the filter, the values are just flipped&lt;br&gt;&lt;b&gt;1d &lt;/b&gt;`f \odot g (t) = sum f(T)g(T+t)`&lt;br&gt;&lt;b&gt;md&lt;/b&gt;&amp;nbsp;`f \odot g (x,y) = sum_{T_1} sum_{T_2} f(T_1,T_2)g(T_1+x, T_2+y)`" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d6b656;fontSize=10;fillColor=#fff2cc;" parent="1" vertex="1">
          <mxGeometry x="369" y="3312" width="369" height="342" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-21" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;RNN&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;· same params for each layer&lt;br&gt;· variable number of layers&lt;br&gt;`rArr` encodes sentences&lt;br&gt;&lt;br&gt;`s_t = tanh(W^{s,s}s_{t-1} + W^{s,x}x_t)`&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;RNN have some gradient issues&lt;br&gt;&lt;br&gt;&lt;b&gt;gating network&lt;/b&gt;&lt;br&gt;in default RNN we overwrite `s_t` but sometimes it&#39;s useful to retain control over what&#39;s overwritten at each step&lt;br&gt;&lt;br&gt;`g_t = &quot;sigmoid&quot;(W^{g,s}s_{t-1} + W^{g,x}x_t)`&lt;br&gt;`s_t = (1-g_t) \odot s_{t-1} + g_t \odot tanh(W^{s,s}s_{t-1} + W^{s,x}x_t)`&lt;br&gt;where `\odot` is element-wise multiplication&lt;br&gt;&lt;br&gt;`(1-g_t): ((0),(1),(0)) rarr ((1),(0),(1))` i.e. `g_t` is use to control what we retain from previous layer&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px&quot;&gt;%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22%26lt%3Bdiv%20style%3D%26quot%3Btext-align%3A%20center%26quot%3B%26gt%3B%26lt%3Bb%26gt%3BDEEP%20LEARNING%26lt%3B%2Fb%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%20style%3D%26quot%3Btext-align%3A%20center%26quot%3B%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fdiv%26gt%3B%C2%B7%20intermediate%20layer%20is%20like%20feature%20representation%3A%20%26quot%3Blearning%20%60phi%60%26quot%3B%26lt%3Bbr%26gt%3B%C2%B7%20activation%20layer%20acts%20like%20linear%20classifier%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3Bb%26gt%3Bbackpropagation%26lt%3B%2Fb%26gt%3B%26lt%3Bbr%26gt%3Bcompute%20partial%20derivatives%20using%20chain%20rule%20to%20do%20gradient%20descent%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%60w_1%20lArr%20w_1%20-%20eta(%7Bdelta%26quot%3BLoss%26quot%3B%7D%2F%7Bdeltaw_1%7D)%60%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%60%7Bdelta%26quot%3BLoss%26quot%3B%7D%2F%7Bdeltaw_1%7D%20%3D%20%7Bdelta%26quot%3BLoss%26quot%3B%7D%2F%7Bdeltaf_1%7D*%20%7Bdeltaf_1%7D%2F%7Bdeltaz_1%7D*%7Bdeltaz_1%7D%2F%7Bdeltaw_1%7D%26lt%3Bbr%26gt%3B%60%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3Brisks%20are%20vanishing%20or%20exploding%20gradients%20with%20long%20chains%22%20style%3D%22text%3Bhtml%3D1%3Balign%3Dleft%3BverticalAlign%3Dtop%3BwhiteSpace%3Dwrap%3Brounded%3D0%3BfontFamily%3DCourier%20New%3BstrokeColor%3Ddefault%3BfontSize%3D10%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20y%3D%223308%22%20width%3D%22369%22%20height%3D%22299%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E&lt;/span&gt;&lt;br&gt;&lt;span style=&quot;color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px&quot;&gt;%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22%26lt%3Bdiv%20style%3D%26quot%3Btext-align%3A%20center%26quot%3B%26gt%3B%26lt%3Bb%26gt%3BDEEP%20LEARNING%26lt%3B%2Fb%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%20style%3D%26quot%3Btext-align%3A%20center%26quot%3B%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fdiv%26gt%3B%C2%B7%20intermediate%20layer%20is%20like%20feature%20representation%3A%20%26quot%3Blearning%20%60phi%60%26quot%3B%26lt%3Bbr%26gt%3B%C2%B7%20activation%20layer%20acts%20like%20linear%20classifier%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3Bb%26gt%3Bbackpropagation%26lt%3B%2Fb%26gt%3B%26lt%3Bbr%26gt%3Bcompute%20partial%20derivatives%20using%20chain%20rule%20to%20do%20gradient%20descent%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%60w_1%20lArr%20w_1%20-%20eta(%7Bdelta%26quot%3BLoss%26quot%3B%7D%2F%7Bdeltaw_1%7D)%60%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%60%7Bdelta%26quot%3BLoss%26quot%3B%7D%2F%7Bdeltaw_1%7D%20%3D%20%7Bdelta%26quot%3BLoss%26quot%3B%7D%2F%7Bdeltaf_1%7D*%20%7Bdeltaf_1%7D%2F%7Bdeltaz_1%7D*%7Bdeltaz_1%7D%2F%7Bdeltaw_1%7D%26lt%3Bbr%26gt%3B%60%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3Brisks%20are%20vanishing%20or%20exploding%20gradients%20with%20long%20chains%22%20style%3D%22text%3Bhtml%3D1%3Balign%3Dleft%3BverticalAlign%3Dtop%3BwhiteSpace%3Dwrap%3Brounded%3D0%3BfontFamily%3DCourier%20New%3BstrokeColor%3Ddefault%3BfontSize%3D10%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20y%3D%223308%22%20width%3D%22369%22%20height%3D%22299%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3Ev&lt;br&gt;`&lt;br&gt;&lt;/span&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d6b656;fontSize=10;fillColor=#fff2cc;" parent="1" vertex="1">
          <mxGeometry y="3574" width="369" height="310" as="geometry" />
        </mxCell>
        <mxCell id="OSF1zd0BggHWbTQcVq7J-1" value="&lt;b&gt;PYTHON MISC&lt;/b&gt;&lt;br&gt;convert row vector into column vector&lt;br&gt;Y =&amp;nbsp;Y.reshape(-1,1)&lt;br&gt;&lt;br&gt;&lt;b&gt;sigmoid&lt;/b&gt;&lt;br&gt;from scipy.stats import logistic&lt;br&gt;logistic.cdf(x)&lt;br&gt;&lt;br&gt;&lt;b&gt;build feature matrix X from individual arrays&lt;br&gt;&lt;/b&gt;X = np.vstack((np.ones((1,30)), A, B)).T" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=default;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="846" y="1654" width="323" height="150" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-2" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;LINEAR CLASSIFIERS&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;boundary line: `theta * x + theta_0 = 0`&lt;br&gt;&lt;br&gt;`theta * x` is positive if `x` is on the right side of the decision boundary" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#6c8ebf;fontSize=10;fillColor=#dae8fc;" parent="1" vertex="1">
          <mxGeometry y="2484" width="320" height="79" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-3" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;PERCEPTRON&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;`y^{(i)} in {-1,1}`&lt;br&gt;&lt;br&gt;training error: `epsilon(theta,theta_0) = 1/n sum 1{y^{(i)}(theta*x^{(i)} + theta_0) &amp;lt;= 0}`&lt;br&gt;&lt;br&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;br&gt;`theta = vec{0}`&lt;br&gt;for t = 1...T&lt;br&gt;&amp;nbsp; for i = 1...n&lt;br&gt;&amp;nbsp; &amp;nbsp; if `y^{(i)}(theta*x^{(i)} + theta_0) &amp;lt;= 0` then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; `theta = theta + y^{(i)}x^{(i)}`&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; `theta_0 = theta_0 + y^{(i)}`" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#6c8ebf;fontSize=10;fillColor=#dae8fc;" parent="1" vertex="1">
          <mxGeometry y="2563" width="320" height="200" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-4" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;REGULARIZATION&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;we want large boundaries: `vdots \ \ \ | \ \ \ vdots`&lt;br&gt;where `vdots` are `theta*x^{(i)} + theta_0 = {1, -1}` and `|` is `theta*x^{(i)} + theta_0 = 0`&lt;br&gt;· prevents overfitting&lt;br&gt;· the bigger `||theta||` the faster (= shorter distance) these reach -1 and 1&lt;br&gt;· we can control the margins distance with `norm(theta)`&lt;br&gt;&lt;br&gt;&lt;b&gt;signed distance&lt;/b&gt;&lt;br&gt;`gamma_i = y^{(i)} (theta*x^{(i)} + theta_0)/norm(theta) = 1/norm(theta)` or `-1/norm(theta)`&lt;br&gt;to maximise `1/norm(theta)` we minimise `1/2 norm(theta)^2`&lt;br&gt;&lt;br&gt;&lt;b&gt;hinge loss&lt;/b&gt;&lt;br&gt;$$\begin{equation}&lt;br&gt;\begin{aligned}&lt;br&gt;Loss_h(z) = Loss_h(y^{(i)}(\theta \cdot x^{(i)} + \theta_0)&lt;br&gt;) = max(0, 1-y^{(i)} (\theta*x^{(i)} + \theta_0)) \\&lt;br&gt;&amp;nbsp;= \begin{cases}&lt;br&gt;0 &amp;amp; \text{if} &amp;amp; z \ge 1 &amp;amp; \text{correct side, outside margins}\\&lt;br&gt;1-z &amp;amp; \text{if} &amp;amp; z \lt 1&lt;br&gt;\end{cases}&lt;br&gt;\end{aligned}&lt;br&gt;\end{equation}$$&lt;br&gt;hinge loss improves by moving `theta` towards example&lt;br&gt;&lt;br&gt;&lt;b&gt;objective&lt;/b&gt;&lt;br&gt;`J(theta, theta_0) = 1/n sum Loss_h(y^{(i)} (theta*x^{(i)} + theta_0)) + lambda/2 norm(theta)^2`&lt;br&gt;where `lambda` is regularisation loss and minimising that term increases margins&lt;br&gt;&lt;br&gt;`rarr` by minimising J we balance maximising margins and minimising loss&lt;br&gt;&lt;br&gt;&lt;b&gt;gradient descent&lt;/b&gt;&lt;br&gt;`theta lArr theta - eta grad J(theta)`" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#6c8ebf;fontSize=10;fillColor=#dae8fc;" parent="1" vertex="1">
          <mxGeometry y="2763" width="320" height="460" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-7" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;MISC&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;`veca * vecb = sum a_ib_i`&lt;br&gt;`a * a = norm(a)^2`&amp;nbsp;&lt;br&gt;`theta_z * Ax = theta_z^TAx = (A^Ttheta_z) * x`&lt;br&gt;&lt;br&gt;&lt;b&gt;distance from point to line&lt;/b&gt;&lt;br&gt;`d = abs(theta*x+theta_0)/norm(theta)`&lt;br&gt;&lt;br&gt;&lt;b&gt;derivative of norm squared&lt;/b&gt;&lt;br&gt;`(norm(h(x))^2)&#39; = 2h(x)h&#39;(x)`&lt;br&gt;&lt;br&gt;&lt;b&gt;derivative&lt;/b&gt;&amp;nbsp;`[y(theta*x)]&#39; = yx`&lt;br&gt;because we derive for each `theta_i`&lt;br&gt;&lt;br&gt;&lt;b&gt;L1 norm&lt;/b&gt;&amp;nbsp;`norm(w)_1 = sum_i^n abs(w_i)`&lt;br&gt;&lt;br&gt;&lt;b&gt;L2 norm&lt;/b&gt;&amp;nbsp;`norm(w)_2 = sqrt( sum_i^n w_i^2 )`&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;b&gt;cosine similarity&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`cos(x^{(i), x^{(j)}}) = (x^{(i)} * x^{(j)})/{norm(x^{(i)})norm(x^{(j)})}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;euclidean distance&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`dist(x^{(i)},x^{(j)}) = norm(x^{(i)} - x^{(j)})`&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=default;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="800" y="2484" width="369" height="827" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-8" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;STOCHASTIC GRADIENT DESCENT&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;update&lt;/b&gt;: sample i at random&lt;/div&gt;&lt;div&gt;&lt;b&gt;decreasing learning rate&lt;/b&gt;&amp;nbsp;`eta_T = 1/(1+T)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`theta lArr theta - eta_T grad_theta [Loss_h(y^{(i)}theta * x^{(i)}) + lambda/2 norm(theta)^2]`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;$$\begin{equation}&lt;br&gt;\begin{aligned}&lt;br&gt;= \theta \bigg[&lt;br&gt;\begin{cases}&lt;br&gt;0 &amp;amp; \text{if} &amp;amp; Loss_h = 0\\&lt;br&gt;-y^{(i)} \cdot x^{(i)} &amp;amp; \text{if} &amp;amp; Loss_h \gt 0&lt;br&gt;\end{cases}&lt;br&gt;+ \lambda\theta&lt;br&gt;\bigg]&lt;br&gt;\end{aligned}&lt;br&gt;\end{equation}$$&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#6c8ebf;fontSize=10;fillColor=#dae8fc;" parent="1" vertex="1">
          <mxGeometry x="320" y="2484" width="240" height="170" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-9" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;SOLVING QUADRATIC&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;if linearly separable and don&#39;t allow any errors, can solve quadratic:&lt;/div&gt;&lt;div&gt;`rArr J(theta, theta_0) = 1/2 norm(theta)^2`&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#6c8ebf;fontSize=10;fillColor=#dae8fc;" parent="1" vertex="1">
          <mxGeometry y="3223" width="320" height="88" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-10" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;LINEAR REGRESSION&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;empirical risk&lt;/b&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;`R_n(theta) = 1/n sum (y^{(t)} - theta x^{(t)})^2/2`&lt;/div&gt;&lt;div&gt;small deviations less penalised than large ones&lt;/div&gt;&lt;div&gt;`grad_theta R_n(theta) = -(y^{(i)} - thetax^{(t)}) * x^{(t)}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;gradient descent&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`theta = 0`&lt;/div&gt;&lt;div&gt;&amp;nbsp; for:&lt;br&gt;&amp;nbsp; &amp;nbsp; random `t = {1...n}` # stochastic, could also loop&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; `theta = theta + eta_k(y^{(t)} - theta * x^{(t)}) * x^{(t)}`&lt;br&gt;&lt;br&gt;with `eta_k = 1/(1+k)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d79b00;fontSize=10;fillColor=#ffe6cc;" parent="1" vertex="1">
          <mxGeometry x="320" y="2654" width="240" height="260" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-11" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;NONLINEAR CLASSIFICATION&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;not linearly separable `rArr` map `x` to higher dimension&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;kernels&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;i.e. `K(x,x&#39;) = phi(x) * phi(X&#39;) = (x * x&#39;) + (x * x&#39;)^2`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;where `phi(x) = (x_1, x_2, x_1^2, sqrt(2)x_1x_2, x_2^2)^T`&lt;br&gt;&lt;br&gt;`rArr` dot product is cheap to compute&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d79b00;fontSize=10;fillColor=#ffe6cc;" parent="1" vertex="1">
          <mxGeometry x="320" y="2914" width="240" height="170" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-12" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;KERNEL PERCEPTRON&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`theta = 0`&lt;/div&gt;&lt;div&gt;for `i = 1...n`&lt;/div&gt;&lt;div&gt;&amp;nbsp; if `y^{(i)}` &lt;font color=&quot;#009900&quot;&gt;`theta * phi(x^{(i)})`&lt;/font&gt; `&amp;lt;= 0`&lt;br&gt;&amp;nbsp; &amp;nbsp; `theta lArr theta + y^{(i)} phi(x^{(i)})`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#009900&quot;&gt;`theta * phi(x^{(i)})`&lt;/font&gt; `= sum_j^n alpha_j y^{(j)} phi(x^{(j)}) phi(x^{(i)})`&lt;/div&gt;&lt;div&gt;where `alpha_j` is nb of mistakes made on j&lt;sup&gt;th&lt;/sup&gt;&amp;nbsp;example&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;we can then rewrite the perceptron algorithm without having to transform `x rArr phi(x)` anymore&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`theta = 0`&lt;/div&gt;&lt;div&gt;for `i = 1...n`&lt;/div&gt;&lt;div&gt;&amp;nbsp; if `y^{(i)} sum_j^n alpha_j y^{(j)} K(x^{(j)}, x^{(i)}) &amp;lt;= 0`&lt;br&gt;&amp;nbsp; &amp;nbsp; `alpha_i = alpha_i + 1`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;kernel composition&lt;/b&gt;&lt;/div&gt;&lt;div&gt;· `f: RR^d rarr R` and `K(x, x&#39;)`&lt;br&gt;`tilde{K}(x, x&#39;) = f(x)K(x, x&#39;)f(x&#39;)`&lt;br&gt;· `K(x, x&#39;) = K_1(x, x&#39;) * K_2(x, x&#39;)`&lt;br&gt;· `K(x, x&#39;) = K_1(x, x&#39;) + K_2(x, x&#39;)`&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;radial basis kernel&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`K(x, x&#39;) = exp(-1/2 norm(x - x&#39;)^2)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`rArr` correctly classifies every point&lt;/div&gt;&lt;div&gt;`rArr` radial in `phi(x) space&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;graph classification&lt;/b&gt;&lt;/div&gt;&lt;div&gt;look at number of bends in figure to determine dimension&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d79b00;fontSize=10;fillColor=#ffe6cc;" parent="1" vertex="1">
          <mxGeometry x="560" y="2484" width="240" height="519" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-13" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;K-NEAREST NEIGHBOURS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`hat{Y}_{ai} = 1/K sum_{b in &quot;KNN&quot;(a,i)} Y_{bi}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;or weigh by similarity&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`hat{Y}_{ai} = ( sum_(b in &quot;KNN&quot;(a,i))&amp;nbsp; sim(a,b) Y_{bi})/(sum_(b in &quot;KNN&quot;) sim(a,b))`&lt;br&gt;&lt;br&gt;&lt;b&gt;euclidian distance &lt;/b&gt;`norm(x_a - x_b)`&lt;/div&gt;&lt;div&gt;&lt;b&gt;cosine similarity&lt;/b&gt;&amp;nbsp;`cos(theta) = (x_a * x_b)/(norm(x_a)norm(x_b))`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;limitations&lt;/b&gt; my combination of tastes maybe uncommon&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d79b00;fontSize=10;fillColor=#ffe6cc;" parent="1" vertex="1">
          <mxGeometry x="560" y="3003" width="240" height="230" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-14" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;COLLABORATIVE FILTERING&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;assumes X has low rank&lt;br&gt;&lt;br&gt;`J(u, v) = sum_{a,i in D} (Y_{ai} - u_av_i)^2/2 + lambda/2 sum^n u_a^2 + lambda/2 sum^m v_i^2`&lt;br&gt;&lt;br&gt;`X = [[&quot;user1rating1&quot;, &quot;user1rating2&quot;],[&quot;user2rating1&quot;, &quot;user2rating2&quot;]] = u * v^T`&lt;br&gt;&lt;br&gt;`rArr` u: user&#39;s rating tendency&lt;br&gt;`rArr` v: info about movie&lt;br&gt;&lt;br&gt;&lt;b&gt;alternating projections&lt;/b&gt;&amp;nbsp;set v, optimise u, set u...&lt;br&gt;continue until local convergence&lt;br&gt;(&lt;a href=&quot;https://learning.edx.org/course/course-v1:MITx+6.86x+3T2023/block-v1:MITx+6.86x+3T2023+type@sequential+block@hw2/block-v1:MITx+6.86x+3T2023+type@vertical+block@hw2-tab1&quot;&gt;exercise link&lt;/a&gt;)" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d79b00;fontSize=10;fillColor=#ffe6cc;" parent="1" vertex="1">
          <mxGeometry x="320" y="3084" width="240" height="227" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-15" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;ACTIVATION FUNCTIONS&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;b&gt;ReLU&lt;/b&gt;&amp;nbsp;`f(z) = max(0,z)`&lt;br&gt;&lt;b&gt;tanh&lt;/b&gt;&amp;nbsp;`f(z) = tanh(z)`&lt;br&gt;&lt;b&gt;linear&lt;/b&gt;&amp;nbsp;`f(z) = z`" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d6b656;fontSize=10;fillColor=#fff2cc;" parent="1" vertex="1">
          <mxGeometry x="560" y="3233" width="240" height="78" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-18" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;DEEP LEARNING&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;· intermediate layer is like feature representation: &quot;learning `phi`&quot;&lt;br&gt;· activation layer acts like linear classifier&lt;br&gt;&lt;br&gt;&lt;b&gt;backpropagation&lt;/b&gt;&lt;br&gt;compute partial derivatives using chain rule to do gradient descent&lt;br&gt;&lt;br&gt;`w_1 lArr w_1 - eta({delta&quot;Loss&quot;}/{deltaw_1})`&lt;br&gt;&lt;br&gt;`{delta&quot;Loss&quot;}/{deltaw_1} = {delta&quot;Loss&quot;}/{deltaf_1}* {deltaf_1}/{deltaz_1}*{deltaz_1}/{deltaw_1}&lt;br&gt;`&lt;br&gt;&lt;br&gt;risks are vanishing or exploding gradients with long chains" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d6b656;fontSize=10;fillColor=#fff2cc;" parent="1" vertex="1">
          <mxGeometry y="3312" width="369" height="262" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-19" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;" parent="1" vertex="1">
          <mxGeometry x="46.5" y="3534" width="276" height="35.68" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-20" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;" parent="1" vertex="1">
          <mxGeometry x="190" y="3614" width="173.26" height="69.45" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-22" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;MARKOV MODELS&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;/div&gt;&amp;lt;beg&amp;gt; `w_1` `w_2` `w_3` &amp;lt;end&amp;gt;&lt;br&gt;&amp;nbsp;`w_0`&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;`w_L`&lt;br&gt;&lt;br&gt;`P(w_1,...,w_L) = P(w_1|w_0)...P(w_L|w_(L-1))`&lt;br&gt;&lt;br&gt;with `P(w&#39;|w) = {&quot;count&quot;(w, w&#39;)}/{sum_tilde{w} &quot;count&quot;(w, tilde{w})}`&lt;br&gt;&lt;br&gt;&lt;b&gt;RNNs for sequences&lt;/b&gt;&lt;br&gt;variable history&lt;br&gt;&lt;br&gt;`phi(&quot;word&quot;)` `vdots X^W vdots^{S_t} X vdots p`&lt;br&gt;&amp;nbsp; &amp;nbsp;`s_{t-1}` `vdots X`&lt;br&gt;&lt;br&gt;i.e. we&#39;re feeding the previous state as input to the next" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#d6b656;fontSize=10;fillColor=#fff2cc;" parent="1" vertex="1">
          <mxGeometry y="3884" width="369" height="255" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-26" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=https://miro.medium.com/max/1200/1*3BRLw4lsANPEfGgimG3YVQ.png;" parent="1" vertex="1">
          <mxGeometry x="400" y="3430" width="325" height="100" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-29" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;K-MEANS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1) randomly assign `z^{(1)}...z^{(2)}`&lt;/div&gt;&lt;div&gt;2) iterate&lt;/div&gt;&lt;div&gt;&amp;nbsp; a) assign x to closest z&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;`&quot;Cost&quot;(z^{(1)}...z^{(k)}) = sum_(i=1)^n min_{j=1...k} norm(x^{(i)} - z^{(j)})^2`&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; b) given `C_1...C_k` find best rep. z in each C&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;`&quot;Cost&quot;(C_1...C_k) = min_{z^{(1)}...z^{(k)}} sum_{j=1}^k sum_{i in C_j} norm(x^{(i)} - z^{(j)})^2`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;problems with K-means&lt;/b&gt;&lt;/div&gt;&lt;div&gt;· points are not in set of Xs&lt;br&gt;&lt;/div&gt;&lt;div&gt;· `(&quot;euclidean distance&quot;)^2` only&lt;br&gt;&lt;/div&gt;&lt;div&gt;· K-means is `O(n * k * d)` for one update step (2)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;find best `z_j` for `C_j`&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`delta/(deltaz_j) sum_{i in C_j} norm(x^{(i)} - z^{(j)})^2 = 0`&lt;/div&gt;&lt;div&gt;`z^{(j)} = (sum x^{(i)})/abs(C_j)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;where `abs(C_j)` is size of `C_j`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;impact of init&lt;/b&gt;&lt;/div&gt;&lt;div&gt;· init matters&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;· we can end up with undesirable convergence&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry x="369" y="3654" width="369" height="390" as="geometry" />
        </mxCell>
        <mxCell id="vmU3JZOFDNbLpcGB9593-1" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="TKYHGULabBaCT76j1ZdH-30" target="669Nq94tx9-52-Hl7sgf-1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-30" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;K-MEDIANS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Like K-means but with medians. Compute median in each single dimension in the Manhattan distance formulation (see &lt;a href=&quot;https://learning.edx.org/course/course-v1:MITx+6.86x+3T2023/block-v1:MITx+6.86x+3T2023+type@sequential+block@hw4/block-v1:MITx+6.86x+3T2023+type@vertical+block@hw4-tab1&quot;&gt;ex.&lt;/a&gt;)&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry x="369" y="4044" width="369" height="75" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-31" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;K-MEDOIDS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1) pick init `z^{(i)}...z^{(j)}` from points X&lt;/div&gt;&lt;div&gt;2) iterate until no change in cost&lt;/div&gt;&lt;div&gt;&amp;nbsp; a) for `i = 1...n`&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;`C_j = {i : z^{(j)} &quot; is closest to &quot; x^{(i)}}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; b) pick the most central `x^{(i)}` in `C_j` to be `z^{(j)}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;for `j = 1...k`&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;`z_j = { x^{(i)}...x^{(n)} : sum_{i in C_j} dist(x^{(i)}, z^{(j)}) &quot; is minimal &quot; }`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;· same idea as K-means but `z_j` is in x and can use any distance measure&lt;/div&gt;&lt;div&gt;· K-medoids is `O(n^2 * k * d)` for update step (2)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;ILfuVd&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;⚠ step 2 gets executed even if no change and cost, and order we cycle in matters and can update the medoid (see &lt;a href=&quot;https://learning.edx.org/course/course-v1:MITx+6.86x+3T2023/block-v1:MITx+6.86x+3T2023+type@sequential+block@hw4/block-v1:MITx+6.86x+3T2023+type@vertical+block@hw4-tab1&quot;&gt;ex.&lt;/a&gt;)&lt;/font&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry x="738" y="3312" width="369" height="292" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-32" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;GENERATIVE MODELS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`p(w|theta) = theta w`: probability of generating word `w` given all possibilities`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;probability of generating doc D&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`p(D|theta) = prod_(i=1)^n theta_{w_i} = prod_(w in W) theta_{w}^{&quot;count&quot;(w)}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;MLE&lt;/b&gt;&lt;/div&gt;&lt;div&gt;max `P(D|theta) rarr sum_(w in W) &quot;count&quot;(w) log(theta_w) `&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`rArr tilde{theta}_w = {&quot;count&quot;(w)}/{sum_(w&#39; in W) &quot;count&quot;(w&#39;)}`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;prediction&lt;/b&gt;&lt;/div&gt;&lt;div&gt;essentially acts as a linear classifier through origin&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;`log` `(p(D|theta^{+}))/(p(D|theta^{-}))` =&lt;br&gt;&lt;br&gt;&lt;b&gt;prior, posterior, likelihood&lt;/b&gt;&lt;br&gt;for when we have same prior knowledge of document classification&lt;br&gt;&lt;br&gt;`P(y=+|D) = (P(D|theta^+)P(y=+))/(P(D))`&lt;br&gt;&lt;br&gt;`rArr` linear classifier with offset influenced by prior&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color: rgb(255 , 0 , 0)&quot;&gt;⚠ N-1 params in multinomial (i.e. remember the binomial uses 1 param for two values)&lt;/span&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry x="738" y="3604" width="369" height="460" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-34" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;/div&gt;&lt;div&gt;\begin{cases}&lt;br&gt;\ge 0 &amp;amp; \text{+}\\&lt;br&gt;\lt 0 &amp;amp; \text{-}&lt;br&gt;\end{cases}&lt;br&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=none;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry x="823" y="3842" width="47" height="50" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-35" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;GAUSSIAN GENERATIVE MODELS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;`X|mu, sigma^2` ~ `N(mu, sigma^2)`&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;want to find `mu` and `sigma^2` that give highest likelihood to training data.&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;`rArr (delta l_n)/(delta mu) = 0` and `(delta l_n)/(delta sigma^2) = 0`&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;`hat{mu} = 1/n sum^n x^{(i)}` and `hat{sigma^2} = 1/(nd) sum^n norm(x^{(i)}-mu)^2`&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry y="4140" width="369" height="165" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-36" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;MIXTURE MODELS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;mixture components&lt;/b&gt;&amp;nbsp;K: `N(x, mu_j, sigma_j^2)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;mixture weights&lt;/b&gt;&amp;nbsp;`p_1...p_k` `sum p_j = 1`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`theta = p_1...p_k, mu_1...mu_k, sigma_1^2...sigma_k^2`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`p(x|theta) = sum_(j=1)^k p_j N(x, mu_j, sigma_j^2)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`p(S_n|theta) = prod_(i=1)^n prod_(j=1)^k p_j N(x, mu_j, sigma_j^2)`&lt;/div&gt;&lt;span style=&quot;color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px&quot;&gt;%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22%26lt%3Bdiv%20style%3D%26quot%3Btext-align%3A%20center%26quot%3B%26gt%3B%26lt%3Bb%26gt%3BGAUSSIAN%20GENERATIVE%20MODELS%26lt%3B%2Fb%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%60X%7Cmu%2C%20sigma%5E2%60%20~%20%60N(mu%2C%20sigma%5E2)%60%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3Bwant%20to%20find%20%60mu%60%20and%20%60sigma%5E2%60%20that%20give%20highest%20likelihood%20to%20training%20data.%26amp%3Bnbsp%3B%26lt%3B%2Fspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%60rArr%20(delta%20l_n)%2F(delta%20mu)%20%3D%200%60%20and%20%60(delta%20l_n)%2F(delta%20sigma%5E2)%20%3D%200%60%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%60hat%7Bmu%7D%20%3D%201%2Fn%20sum%5En%20x%5E%7B(i)%7D%60%20and%20%60hat%7Bsigma%5E2%7D%20%3D%201%2F(nd)%20sum%5En%20norm(x%5E%7B(i)%7D-mu)%5E2%60%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%22%20style%3D%22text%3Bhtml%3D1%3Balign%3Dleft%3BverticalAlign%3Dtop%3BwhiteSpace%3Dwrap%3Brounded%3D0%3BfontFamily%3DCourier%20New%3BstrokeColor%3Ddefault%3BfontSize%3D10%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20y%3D%224135%22%20width%3D%22369%22%20height%3D%22165%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry y="4305" width="369" height="220" as="geometry" />
        </mxCell>
        <mxCell id="TKYHGULabBaCT76j1ZdH-37" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;EM algorithm&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&quot;random&quot; init of `theta : mu^{(i)}, sigma^{(i)}, p_i`&lt;/div&gt;&lt;div&gt;init matters for speed and outcome&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;· converges locally&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;· good idea to use k-means for init&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;expectation step&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`p(j|i) = (p_j N(x_i, mu_j, sigma_j^2I))/(p(x|theta))`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`rArr` probability that point i in cluster j&lt;/div&gt;&lt;div&gt;`rArr` `p(x|theta) = sum_(j=1)^k p_j N(x_i, mu_j, sigma_j^2I)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;maximisation step&lt;/b&gt;&lt;/div&gt;&lt;div&gt;re-estimate parameters, (nb: cluster j, point i)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`hat{n}_j = sum_(i=1)^n p(j|i)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`hat{p}_j = hat{n}_j/n`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`hat{mu}_j = 1/(hat{n}_j) sum_(i=1)^n p(j|i)x^{(i)}`&lt;br&gt;&lt;br&gt;`hat{sigma}_j^2 = 1/(hat{n}_jd) sum_(i=1)^n p(j|i)norm(x^{(i)} - mu^{(j)})^2`&lt;/div&gt;&lt;span style=&quot;color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px&quot;&gt;%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22%26lt%3Bdiv%20style%3D%26quot%3Btext-align%3A%20center%26quot%3B%26gt%3B%26lt%3Bb%26gt%3BGAUSSIAN%20GENERATIVE%20MODELS%26lt%3B%2Fb%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%60X%7Cmu%2C%20sigma%5E2%60%20~%20%60N(mu%2C%20sigma%5E2)%60%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3Bwant%20to%20find%20%60mu%60%20and%20%60sigma%5E2%60%20that%20give%20highest%20likelihood%20to%20training%20data.%26amp%3Bnbsp%3B%26lt%3B%2Fspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%60rArr%20(delta%20l_n)%2F(delta%20mu)%20%3D%200%60%20and%20%60(delta%20l_n)%2F(delta%20sigma%5E2)%20%3D%200%60%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%26lt%3Bdiv%26gt%3B%26lt%3Bspan%26gt%3B%60hat%7Bmu%7D%20%3D%201%2Fn%20sum%5En%20x%5E%7B(i)%7D%60%20and%20%60hat%7Bsigma%5E2%7D%20%3D%201%2F(nd)%20sum%5En%20norm(x%5E%7B(i)%7D-mu)%5E2%60%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fdiv%26gt%3B%22%20style%3D%22text%3Bhtml%3D1%3Balign%3Dleft%3BverticalAlign%3Dtop%3BwhiteSpace%3Dwrap%3Brounded%3D0%3BfontFamily%3DCourier%20New%3BstrokeColor%3Ddefault%3BfontSize%3D10%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20y%3D%224135%22%20width%3D%22369%22%20height%3D%22165%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E&lt;b&gt;&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#9673a6;fontSize=10;fillColor=#e1d5e7;" parent="1" vertex="1">
          <mxGeometry y="4525" width="369" height="440" as="geometry" />
        </mxCell>
        <mxCell id="669Nq94tx9-52-Hl7sgf-1" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;MARKOV DECISION PROCESS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;· states `s in S`&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;· actions `a in A`&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;· action dependent on transition probabilities&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`T(s,a,s&#39;) = P(s&#39;|a,s)`&lt;/div&gt;&lt;div&gt;`sum_(s&#39; in S) T(s,a,s&#39;)=1`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;`R(s,a,s&#39;)`:&amp;nbsp;&lt;span&gt;reward for starting s, doing a, ending s&#39;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;fontSize=10;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="369" y="4140" width="369" height="165" as="geometry" />
        </mxCell>
        <mxCell id="669Nq94tx9-52-Hl7sgf-2" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;UTILITY FUNCTIONS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;finite horizon (not important)&lt;/b&gt;&lt;/div&gt;&lt;div&gt;count reward for next n steps: `U(s_0...s_n) = sum^n R(s_i)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;infinite horizon/discounted reward&lt;/b&gt;&lt;/div&gt;&lt;div&gt;`U(s_0...s_n) = sum_{k=0}^(oo) Y^k R(s_k) &amp;lt;= R_(max)/(1-gamma)`&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;value function&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;`V^{star}(s)`: expected reward if agent acts optimally starting at s&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;`pi:SrarrA`: assigns action `pi(s)` to state s&lt;/div&gt;&lt;div&gt;optimal policy `pi^{star}` assigns action at every state that maximises expected utility&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`Q^{star}(s,a)`: expected reward starting at s, taking action a and acting optimally&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;fontSize=10;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="369" y="4305" width="369" height="270" as="geometry" />
        </mxCell>
        <mxCell id="669Nq94tx9-52-Hl7sgf-3" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;BELLMAN EQUATIONS&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;`V^{star}(s) = max_a Q^{star}(s,a) = Q^{star}(s, pi^{star}(s))`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`Q^{star}(s,a) = sum_(s&#39;) T(s,a,s&#39;)[R(s,a,s&#39;)+gammaV^{star}(s&#39;)]`&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;fontSize=10;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="369" y="4575" width="369" height="90" as="geometry" />
        </mxCell>
        <mxCell id="669Nq94tx9-52-Hl7sgf-4" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;VALUE ITERATION ALGORITHM&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;`V_k^{star}(s) rarr_(k-&amp;gt;oo) V(s)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;· init: `V_0^{star}(s) = 0`&lt;br&gt;&lt;/div&gt;&lt;div&gt;· iterate until `V_k^{star}(s) ~~ V_(k+1)^{star}(s) forall s`&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`V_(k+1)^{star} = max_a [sum_(s&#39;) T(s,a,s&#39;)[R(s,a,s&#39;)+gamma V_k^{star}(s&#39;)]]`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;· compute `Q^{star}(s,a)`&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;then `pi^{star}(s) = argmax_a Q^{star}(s,a)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;fontSize=10;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="369" y="4665" width="369" height="190" as="geometry" />
        </mxCell>
        <mxCell id="669Nq94tx9-52-Hl7sgf-5" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;Q-VALUE ITERATION&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;same as above but with Q and the update is:&lt;/div&gt;&lt;div&gt;`Q_(k+1)^{star} = sum_(s&#39;) T(s,a,s&#39;)[R(s,a,s&#39;) + gamma max_(a&#39;) Q_k^{star}(s&#39;,a&#39;)]`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`rArr` we&#39;re summing over all possible states we may land in&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;fontSize=10;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="369" y="4855" width="369" height="110" as="geometry" />
        </mxCell>
        <mxCell id="669Nq94tx9-52-Hl7sgf-6" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;RL&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;typically won&#39;t have T and R ahead of time&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Q-value iteration&lt;/b&gt;&lt;/div&gt;&lt;div&gt;want to calculate estimates for Q but don&#39;t have T and R. we&#39;ll use &lt;b&gt;exponential running average&lt;/b&gt;&amp;nbsp;to get estimates for `Q(s,a)`:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`Q_(i+1)(s,a) = alpha * &quot;sample&quot; + (1-alpha)Q_i(s,a)`&lt;br&gt;sample: `R(s,a,s&#39;) + gamma max_(a&#39;) Q_i(s&#39;,a&#39;)`&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;1) &lt;b&gt;initialisation&lt;/b&gt; `Q(s,a)=0 forall a`&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2) &lt;b&gt;iterate until convergence&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;a) collect samples: s,a,s&#39;,R(s,a,s&#39;)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;b) `Q_(i+1)(s,a) = alpha [R(s,a,s&#39;) + gamma max_(a&#39;) Q_i(s&#39;,a&#39;)] + (1-alpha)Q_i(s,a)`&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;`epsilon` greedy&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;balance exploration and exploitation&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;· random action w.p. `epsilon`&lt;br&gt;&lt;/div&gt;&lt;div&gt;· best current action w.p. `(1-epsilon)`&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;`epsilon` should decay over time&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;fontSize=10;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="738" y="4140" width="369" height="385" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-2" value="&lt;div style=&quot;text-align: center&quot;&gt;&lt;b&gt;EXPERIMENTAL METHODS&lt;/b&gt;&lt;/div&gt;&lt;b&gt;&lt;div&gt;&lt;b&gt;treatment/indie variable&lt;/b&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;&amp;nbsp;what we are able to control&lt;/span&gt;&lt;/div&gt;&lt;/b&gt;&lt;b&gt;outcome/dependent variable &lt;/b&gt;what we observe&lt;br&gt;&lt;b&gt;stratification&lt;/b&gt;&amp;nbsp;i.e. stratify by demographic vars before splitting into ctrl groups&lt;br&gt;&lt;b&gt;double-blind &lt;/b&gt;even experimenters don&#39;t know who is placebo&lt;br&gt;&lt;b&gt;observational study&lt;/b&gt;&amp;nbsp;experiment not randomizable&lt;br&gt;&lt;b&gt;control variable &lt;/b&gt;i.e. income level on education&lt;br&gt;&lt;b&gt;confounding variable&lt;/b&gt;&amp;nbsp;influences both treatment and outcome variables&lt;br&gt;&lt;span style=&quot;color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px&quot;&gt;&lt;br&gt;%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22%26lt%3Bb%26gt%3BPYTHON%20MISC%26lt%3B%2Fb%26gt%3B%26lt%3Bbr%26gt%3Bconvert%20row%20vector%20into%20column%20vector%26lt%3Bbr%26gt%3BY%20%3D%26amp%3Bnbsp%3BY.reshape(-1%2C1)%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%26lt%3Bb%26gt%3Bsigmoid%26lt%3B%2Fb%26gt%3B%26lt%3Bbr%26gt%3Bfrom%20scipy.stats%20import%20logistic%26lt%3Bbr%26gt%3Blogistic.cdf(x)%26lt%3Bbr%26gt%3B%26lt%3Bbr%26gt%3B%22%20style%3D%22text%3Bhtml%3D1%3Balign%3Dleft%3BverticalAlign%3Dtop%3BwhiteSpace%3Dwrap%3Brounded%3D0%3BfontFamily%3DCourier%20New%3BstrokeColor%3Ddefault%3BfontSize%3D10%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20y%3D%221654%22%20width%3D%22480%22%20height%3D%22150%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E&lt;b&gt;e&lt;/b&gt;&lt;/span&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=default;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="-3.552713678800501e-15" y="1654" width="340" height="150" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-3" value="&lt;div style=&quot;text-align: center&quot;&gt;HYPOTHESIS TESTING WITH HYPERGEOMETRIC&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;aka &lt;/span&gt;Fisher&#39;s exact test&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;does drug help? we assume `H_0` is `mu_1 = mu_2` so we use Hypergeometric distribution to check what is probability of drawing these numbers of deaths between study and control group under `H_0`.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-weight: 400&quot;&gt;p-value: `sum_(i=0)^39 P_(H_0)(T=i)`&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-weight: 400&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;pro&lt;span style=&quot;font-weight: normal&quot;&gt;&amp;nbsp;doesn&#39;t assume knowledge of true value in ctrl group&lt;/span&gt;&lt;/div&gt;&lt;div&gt;con &lt;span style=&quot;font-weight: normal&quot;&gt;assumes knowledge of margins&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=default;fontSize=10;fontStyle=1" parent="1" vertex="1">
          <mxGeometry y="1804" width="340" height="176" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-4" value="&lt;div style=&quot;text-align: left&quot;&gt;z-test&lt;span style=&quot;font-weight: normal&quot;&gt;&amp;nbsp;if we know the true value of `sigma`&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left&quot;&gt;t-test&lt;span style=&quot;font-weight: normal&quot;&gt;&amp;nbsp;if we estimate `hat{sigma}`: `bar{X}_n/(hat{sigma}/sqrt(n))` ~ `t_{n-1}`&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=default;fontSize=10;fontStyle=1" parent="1" vertex="1">
          <mxGeometry y="1980" width="340" height="70" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-7" value="&lt;b&gt;LIKELIHOOD RATIO TEST (POISSON)&lt;br&gt;&lt;/b&gt;&lt;br&gt;from scipy import stats&lt;br&gt;&lt;br&gt;&lt;div&gt;n = 1&lt;/div&gt;&lt;div&gt;d = 1&lt;/div&gt;&lt;div&gt;for row in data.data.iterrows():&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; G_i = row[&quot;count&quot;]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; t_i = row[&quot;seconds&quot;]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; lambda_i = G_i/t_i&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; n *= stats.poisson.pmf(G_i, lambda_mle)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; d *= stats.poisson.pmf(G_i, lambda_i)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;test_statistic = -2*np.log(n/d)&lt;/div&gt;&lt;div&gt;test_statistic&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry y="2130" width="340" height="200" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-8" value="&lt;b&gt;LOAD CSV DATA&lt;br&gt;&lt;/b&gt;&lt;br&gt;import pandas as pd&lt;br&gt;data = pd.read_csv(&#39;gamma-ray.csv&#39;)&lt;br&gt;&lt;br&gt;optional header=None and index_col" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry y="2050" width="340" height="80" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-9" value="&lt;b&gt;PANDAS MISC&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;get first row&lt;/b&gt;&lt;br&gt;df.iloc[0]&lt;br&gt;&lt;br&gt;&lt;b&gt;get first 10 columns&lt;br&gt;&lt;/b&gt;df.iloc[:, 0:10]&lt;br&gt;&lt;br&gt;&lt;b&gt;iterate rows&lt;br&gt;&lt;/b&gt;for index, row in data.iterrows():&lt;br&gt;&amp;nbsp; print(row[&quot;seconds&quot;])&lt;br&gt;&lt;br&gt;&lt;b&gt;mean (of each row, over columns)&lt;/b&gt;&lt;br&gt;df.mean(axis=1)" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="846" y="1804" width="323" height="180" as="geometry" />
        </mxCell>
        <mxCell id="_HKm_vHDOU_u6DP0Ox0X-10" value="&lt;b&gt;QQ PLOTS&lt;/b&gt;&lt;br&gt;&lt;br&gt;here we were trying to figure out if we should apply a log transformation to some fields&lt;br&gt;&lt;br&gt;&lt;div&gt;stats.probplot(data[key], dist=&quot;norm&quot;, plot=plt)&lt;/div&gt;&lt;div&gt;plt.show()&lt;/div&gt;&lt;div&gt;stats.probplot(np.log(data[key]), dist=&quot;norm&quot;, plot=plt)&lt;/div&gt;&lt;div&gt;&lt;span&gt;plt.show()&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="846" y="1984" width="323" height="150" as="geometry" />
        </mxCell>
        <mxCell id="ypDJtjkD_ADv3BmLfAHM-1" value="&lt;b&gt;MLE &lt;/b&gt;(&lt;a href=&quot;https://learning.edx.org/course/course-v1:MITx+6.419x+2T2023/block-v1:MITx+6.419x+2T2023+type@sequential+block@statsreview_hw/block-v1:MITx+6.419x+2T2023+type@vertical+block@statsreview_hw-tab4&quot;&gt;ex.&lt;/a&gt;)&lt;br&gt;&lt;br&gt;derive MLE by hand, then implement as code&lt;br&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="846" y="2424" width="323" height="57" as="geometry" />
        </mxCell>
        <mxCell id="ypDJtjkD_ADv3BmLfAHM-2" value="&lt;b&gt;WELCH T TEST &lt;/b&gt;(&lt;a href=&quot;https://learning.edx.org/course/course-v1:MITx+6.419x+2T2023/block-v1:MITx+6.419x+2T2023+type@sequential+block@statsreview_hw/block-v1:MITx+6.419x+2T2023+type@vertical+block@statsreview_hw-tab6&quot;&gt;ex.&lt;/a&gt;)&lt;br&gt;&lt;i&gt;find features that are significantly different between two sample populations&lt;/i&gt;&lt;br&gt;result = stats.ttest_ind(data_aml, data_all, axis=1, equal_var=False, nan_policy=&#39;raise&#39;, alternative=&#39;two-sided&#39;)" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="340" y="1764" width="320" height="86" as="geometry" />
        </mxCell>
        <mxCell id="ypDJtjkD_ADv3BmLfAHM-3" value="&lt;div&gt;&lt;b&gt;MULTIPLE HYPOTHESES TESTING CORRECTIONS&lt;br&gt;&lt;br&gt;holm-bonferroni&lt;/b&gt;&lt;/div&gt;&lt;div&gt;pvalues = sorted(result.pvalue)&lt;/div&gt;&lt;div&gt;count = 0&lt;/div&gt;&lt;div&gt;alpha = 0.05&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;for i, v in enumerate(pvalues):&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if v &amp;lt;= alpha/(len(pvalues) - i):&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; count += 1&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;count&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;bonferroni-hochberg&lt;/b&gt;&lt;/div&gt;&lt;div&gt;pvalues = sorted(result.pvalue)&lt;/div&gt;&lt;div&gt;alpha = 0.05&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;for i, v in enumerate(pvalues):&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if v &amp;lt;= (i+1)/len(pvalues) * alpha:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; else:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;print(i)&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="340" y="1850" width="320" height="300" as="geometry" />
        </mxCell>
        <mxCell id="ypDJtjkD_ADv3BmLfAHM-4" value="&lt;b&gt;LINEAR REGRESSION&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;add first column of 1s&lt;br&gt;&lt;/b&gt;X.insert(0, &quot;label&quot;, np.ones((100,1)))&lt;br&gt;&lt;br&gt;&lt;b&gt;LSE/Bayes estimator&lt;br&gt;&lt;/b&gt;beta = np.linalg.inv(X.T@X)@X.T@y&lt;br&gt;# y is row vector, X is rows for sample" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="340" y="1654" width="320" height="110" as="geometry" />
        </mxCell>
        <mxCell id="ypDJtjkD_ADv3BmLfAHM-5" value="&lt;b&gt;GRADIENT DESCENT&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;def gradient_descent(X, y, step_size, precision):&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; beta = np.zeros((X.shape[1], 1))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; losses = []&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; def loss(beta, X, y):&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return float(np.sum(np.square(y - X@beta)))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; def loss_grad(beta, X, y):&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return (y - X@beta).T@X&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; while True:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; last_loss = loss(beta, X, y)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; beta += step_size * loss_grad(beta, X, y).T&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this_loss = loss(beta, X, y)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if abs(last_loss - this_loss) &amp;lt;= precision:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return beta&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;gradient_descent(X, y, 0.005, 10**(-6))&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="846" y="2134" width="323" height="290" as="geometry" />
        </mxCell>
        <mxCell id="ypDJtjkD_ADv3BmLfAHM-6" value="&lt;b&gt;T TEST TO FIND UNNECESSARY LIN.REG. PARAMS &lt;/b&gt;(&lt;a href=&quot;https://learning.edx.org/course/course-v1:MITx+6.419x+2T2023/block-v1:MITx+6.419x+2T2023+type@sequential+block@statsreview_lec4_regression/block-v1:MITx+6.419x+2T2023+type@vertical+block@statsreview_lec4_regression-tab4&quot;&gt;theory.&lt;/a&gt;)&lt;br&gt;&lt;br&gt;&lt;div&gt;N = len(y) # nb of data points&lt;/div&gt;&lt;div&gt;p = len(X[0]) # dimension of a sample feature vector&lt;/div&gt;&lt;div&gt;var_hat = (np.linalg.norm(y - X@beta)**2)/(N - p)&amp;nbsp;&lt;/div&gt;&lt;div&gt;sigma_hat = np.sqrt(var_hat)&lt;/div&gt;&lt;div&gt;beta_cov = np.linalg.inv(X.T@X)&lt;/div&gt;&lt;div&gt;# T statistics&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ts = beta/(sigma_hat*np.sqrt(np.diagonal(beta_cov)))&lt;/div&gt;&lt;div&gt;pvalues = 2*scipy.stats.t.sf(np.abs(Ts), (N - p))&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontFamily=Courier New;strokeColor=#666666;fontSize=10;fillColor=#f5f5f5;fontColor=#333333;" parent="1" vertex="1">
          <mxGeometry x="340" y="2150" width="320" height="136" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
